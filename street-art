<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Street Art Creator</title>
    <style>
        .street-art-container {
            all: initial;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            width: 100%;
            max-width: 100%;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            background: linear-gradient(135deg, #2c3e50, #34495e);
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
        }

        .street-art-container *,
        .street-art-container *::before,
        .street-art-container *::after {
            box-sizing: border-box;
        }

        .street-art-header {
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
            padding: 16px;
            text-align: center;
            font-weight: 700;
            font-size: clamp(1.1rem, 3vw, 1.4rem);
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
        }

        .street-art-workspace {
            display: flex;
            flex-direction: column;
            background: #ecf0f1;
            min-height: 500px;
        }

        .canvas-container {
            position: relative;
            flex: 1;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 400"><defs><pattern id="brick" x="0" y="0" width="60" height="30" patternUnits="userSpaceOnUse"><rect width="60" height="30" fill="%23f4f4f4"/><rect width="30" height="15" fill="%23f8f8f8"/><rect x="30" width="30" height="15" fill="%23fafafa"/><rect y="15" width="30" height="15" fill="%23fafafa"/><rect x="30" y="15" width="30" height="15" fill="%23f8f8f8"/><rect width="60" height="1" fill="%23e8e8e8"/><rect width="1" height="30" fill="%23e8e8e8"/></pattern></defs><rect width="800" height="400" fill="url(%23brick)"/></svg>');
            background-size: cover;
            background-position: center;
            margin: 0;
            overflow: hidden;
        }

        .drawing-canvas {
            width: 100%;
            height: 400px;
            cursor: crosshair;
            display: block;
            background: transparent;
        }

        .drawing-canvas.emoji-mode {
            cursor: pointer;
        }

        .toolbar {
            background: #34495e;
            padding: 12px;
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            align-items: center;
            justify-content: center;
            border-top: 2px solid #2c3e50;
        }

        .tool-group {
            display: flex;
            align-items: center;
            gap: 6px;
            background: rgba(255, 255, 255, 0.1);
            padding: 8px;
            border-radius: 8px;
            margin: 2px;
        }

        .tool-label {
            color: #ecf0f1;
            font-size: 0.8rem;
            font-weight: 600;
            min-width: 50px;
        }

        .color-palette {
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
        }

        .color-btn {
            width: 32px;
            height: 32px;
            border: 3px solid #fff;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.2s ease;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .color-btn:hover {
            transform: scale(1.1);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }

        .color-btn.active {
            border-color: #f39c12;
            border-width: 4px;
            transform: scale(1.15);
        }

        .brush-btn {
            background: #3498db;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.8rem;
            font-weight: 600;
            transition: all 0.2s ease;
            min-width: 60px;
        }

        .brush-btn:hover {
            background: #2980b9;
            transform: translateY(-1px);
        }

        .brush-btn.active {
            background: #e74c3c;
        }

        .size-slider {
            width: 80px;
            height: 6px;
            background: #bdc3c7;
            border-radius: 3px;
            outline: none;
            -webkit-appearance: none;
            cursor: pointer;
        }

        .size-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 18px;
            height: 18px;
            background: #e74c3c;
            border-radius: 50%;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .size-slider::-moz-range-thumb {
            width: 18px;
            height: 18px;
            background: #e74c3c;
            border-radius: 50%;
            cursor: pointer;
            border: none;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .size-display {
            color: #ecf0f1;
            font-weight: 600;
            min-width: 30px;
            text-align: center;
        }

        .emoji-palette {
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
            max-width: 200px;
        }

        .emoji-btn {
            background: rgba(255, 255, 255, 0.9);
            border: 2px solid transparent;
            border-radius: 6px;
            padding: 4px;
            cursor: pointer;
            font-size: 1.2rem;
            transition: all 0.2s ease;
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .emoji-btn:hover {
            background: white;
            transform: scale(1.1);
            border-color: #3498db;
        }

        .emoji-btn.selected {
            background: #3498db;
            color: white;
            border-color: #2980b9;
            transform: scale(1.1);
        }

        .action-btn {
            background: #95a5a6;
            color: white;
            border: none;
            padding: 10px 16px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 0.9rem;
            font-weight: 600;
            transition: all 0.2s ease;
        }

        .action-btn:hover {
            background: #7f8c8d;
            transform: translateY(-1px);
        }

        .action-btn.clear {
            background: #e74c3c;
        }

        .action-btn.clear:hover {
            background: #c0392b;
        }

        .action-btn.save {
            background: #27ae60;
        }

        .action-btn.save:hover {
            background: #229954;
        }

        @media (max-width: 768px) {
            .toolbar {
                padding: 8px;
                gap: 6px;
            }

            .tool-group {
                padding: 6px;
                margin: 1px;
            }

            .tool-label {
                font-size: 0.7rem;
                min-width: 40px;
            }

            .color-btn {
                width: 28px;
                height: 28px;
            }

            .emoji-btn {
                width: 28px;
                height: 28px;
                font-size: 1rem;
            }

            .brush-btn {
                padding: 6px 8px;
                font-size: 0.7rem;
                min-width: 50px;
            }

            .size-slider {
                width: 60px;
            }
        }

        @media (max-width: 480px) {
            .street-art-header {
                padding: 12px;
                font-size: 1rem;
            }

            .drawing-canvas {
                height: 300px;
            }

            .toolbar {
                flex-direction: column;
                gap: 8px;
            }

            .tool-group {
                width: 100%;
                justify-content: center;
            }

            .emoji-palette {
                max-width: 100%;
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="street-art-container">
        <div class="street-art-header">
            üé® Create Your Street Art Masterpiece! üè¢
        </div>
        
        <div class="street-art-workspace">
            <div class="canvas-container">
                <canvas class="drawing-canvas" id="drawingCanvas"></canvas>
            </div>
            
            <div class="toolbar">
                <div class="tool-group">
                    <span class="tool-label">Colors:</span>
                    <div class="color-palette">
                        <div class="color-btn active" style="background: #e74c3c" data-color="#e74c3c"></div>
                        <div class="color-btn" style="background: #3498db" data-color="#3498db"></div>
                        <div class="color-btn" style="background: #2ecc71" data-color="#2ecc71"></div>
                        <div class="color-btn" style="background: #f39c12" data-color="#f39c12"></div>
                        <div class="color-btn" style="background: #9b59b6" data-color="#9b59b6"></div>
                        <div class="color-btn" style="background: #1abc9c" data-color="#1abc9c"></div>
                        <div class="color-btn" style="background: #34495e" data-color="#34495e"></div>
                        <div class="color-btn" style="background: #ffffff" data-color="#ffffff"></div>
                        <div class="color-btn" style="background: #000000" data-color="#000000"></div>
                        <div class="color-btn" style="background: #ff6b9d" data-color="#ff6b9d"></div>
                    </div>
                </div>

                <div class="tool-group">
                    <span class="tool-label">Brush:</span>
                    <button class="brush-btn active" data-brush="round">Round</button>
                    <button class="brush-btn" data-brush="square">Square</button>
                    <button class="brush-btn" data-brush="spray">Spray</button>
                </div>

                <div class="tool-group">
                    <span class="tool-label">Size:</span>
                    <input type="range" class="size-slider" id="brushSize" min="2" max="50" value="10">
                    <span class="size-display" id="sizeDisplay">10</span>
                </div>

                <div class="tool-group">
                    <span class="tool-label">Emojis:</span>
                    <div class="emoji-palette">
                        <button class="emoji-btn" data-emoji="‚ù§Ô∏è">‚ù§Ô∏è</button>
                        <button class="emoji-btn" data-emoji="‚úä">‚úä</button>
                        <button class="emoji-btn" data-emoji="üåü">üåü</button>
                        <button class="emoji-btn" data-emoji="üåà">üåà</button>
                        <button class="emoji-btn" data-emoji="üéµ">üéµ</button>
                        <button class="emoji-btn" data-emoji="üïäÔ∏è">üïäÔ∏è</button>
                        <button class="emoji-btn" data-emoji="üå∏">üå∏</button>
                        <button class="emoji-btn" data-emoji="‚≠ê">‚≠ê</button>
                        <button class="emoji-btn" data-emoji="üé®">üé®</button>
                        <button class="emoji-btn" data-emoji="üå∫">üå∫</button>
                        <button class="emoji-btn" data-emoji="ü¶ã">ü¶ã</button>
                        <button class="emoji-btn" data-emoji="üåø">üåø</button>
                        <button class="emoji-btn" data-emoji="üî•">üî•</button>
                        <button class="emoji-btn" data-emoji="‚ö°">‚ö°</button>
                        <button class="emoji-btn" data-emoji="üåç">üåç</button>
                    </div>
                </div>

                <div class="tool-group">
                    <button class="action-btn clear" id="clearCanvas">Clear</button>
                    <button class="action-btn save" id="saveArt">Save Art</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        (function() {
            const canvas = document.getElementById('drawingCanvas');
            const ctx = canvas.getContext('2d');
            
            // Set canvas size
            function resizeCanvas() {
                const container = canvas.parentElement;
                canvas.width = container.offsetWidth;
                canvas.height = container.offsetHeight;
                
                // Set default drawing properties
                ctx.lineCap = 'round';
                ctx.lineJoin = 'round';
                
                // Redraw background after resize
                drawBackground();
            }
            
            // Initialize canvas
            resizeCanvas();
            window.addEventListener('resize', resizeCanvas);
            
            // Draw background on canvas
            function drawBackground() {
                // Create brick pattern background
                const brickPattern = createBrickPattern();
                ctx.fillStyle = brickPattern;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
            }
            
            function createBrickPattern() {
                // Create a small canvas for the brick pattern
                const patternCanvas = document.createElement('canvas');
                const patternCtx = patternCanvas.getContext('2d');
                patternCanvas.width = 60;
                patternCanvas.height = 30;
                
                // Draw brick pattern
                patternCtx.fillStyle = '#f4f4f4';
                patternCtx.fillRect(0, 0, 60, 30);
                
                // Add brick details
                patternCtx.fillStyle = '#f8f8f8';
                patternCtx.fillRect(0, 0, 30, 15);
                patternCtx.fillRect(30, 15, 30, 15);
                
                patternCtx.fillStyle = '#fafafa';
                patternCtx.fillRect(30, 0, 30, 15);
                patternCtx.fillRect(0, 15, 30, 15);
                
                // Add mortar lines
                patternCtx.strokeStyle = '#e8e8e8';
                patternCtx.lineWidth = 1;
                patternCtx.beginPath();
                patternCtx.moveTo(0, 15);
                patternCtx.lineTo(60, 15);
                patternCtx.moveTo(30, 0);
                patternCtx.lineTo(30, 15);
                patternCtx.moveTo(0, 30);
                patternCtx.lineTo(30, 30);
                patternCtx.stroke();
                
                return ctx.createPattern(patternCanvas, 'repeat');
            }
            
            // Draw initial background
            drawBackground();
            
            // Drawing state
            let isDrawing = false;
            let currentColor = '#e74c3c';
            let currentBrush = 'round';
            let currentSize = 10;
            let currentTool = 'brush';
            let currentEmoji = '';
            let selectedEmojiBtn = null;
            
            // Color selection
            document.querySelectorAll('.color-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    document.querySelector('.color-btn.active').classList.remove('active');
                    btn.classList.add('active');
                    currentColor = btn.dataset.color;
                    currentTool = 'brush';
                    canvas.classList.remove('emoji-mode');
                    
                    // Deselect emoji
                    if (selectedEmojiBtn) {
                        selectedEmojiBtn.classList.remove('selected');
                        selectedEmojiBtn = null;
                    }
                });
            });
            
            // Brush selection
            document.querySelectorAll('.brush-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    document.querySelector('.brush-btn.active').classList.remove('active');
                    btn.classList.add('active');
                    currentBrush = btn.dataset.brush;
                    currentTool = 'brush';
                    canvas.classList.remove('emoji-mode');
                    
                    // Deselect emoji
                    if (selectedEmojiBtn) {
                        selectedEmojiBtn.classList.remove('selected');
                        selectedEmojiBtn = null;
                    }
                });
            });
            
            // Size control
            const sizeSlider = document.getElementById('brushSize');
            const sizeDisplay = document.getElementById('sizeDisplay');
            
            sizeSlider.addEventListener('input', () => {
                currentSize = sizeSlider.value;
                sizeDisplay.textContent = currentSize;
            });
            
            // Emoji selection
            document.querySelectorAll('.emoji-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    // Deselect previous emoji
                    if (selectedEmojiBtn) {
                        selectedEmojiBtn.classList.remove('selected');
                    }
                    
                    // If clicking the same emoji, deselect it
                    if (selectedEmojiBtn === btn) {
                        currentTool = 'brush';
                        selectedEmojiBtn = null;
                        canvas.classList.remove('emoji-mode');
                    } else {
                        // Select new emoji
                        btn.classList.add('selected');
                        selectedEmojiBtn = btn;
                        currentTool = 'emoji';
                        currentEmoji = btn.dataset.emoji;
                        canvas.classList.add('emoji-mode');
                    }
                });
            });
            
            // Drawing functions
            function startDrawing(e) {
                const rect = canvas.getBoundingClientRect();
                const x = (e.clientX || e.touches[0].clientX) - rect.left;
                const y = (e.clientY || e.touches[0].clientY) - rect.top;
                
                if (currentTool === 'emoji') {
                    drawEmoji(x, y);
                    return;
                }
                
                isDrawing = true;
                draw(e);
            }
            
            function draw(e) {
                if (!isDrawing || currentTool === 'emoji') return;
                
                const rect = canvas.getBoundingClientRect();
                const x = (e.clientX || e.touches[0].clientX) - rect.left;
                const y = (e.clientY || e.touches[0].clientY) - rect.top;
                
                ctx.globalCompositeOperation = 'source-over';
                ctx.strokeStyle = currentColor;
                ctx.lineWidth = currentSize;
                
                if (currentBrush === 'round') {
                    ctx.lineCap = 'round';
                    ctx.lineJoin = 'round';
                    
                    ctx.lineTo(x, y);
                    ctx.stroke();
                    ctx.beginPath();
                    ctx.moveTo(x, y);
                } else if (currentBrush === 'square') {
                    ctx.lineCap = 'square';
                    ctx.lineJoin = 'miter';
                    
                    ctx.fillStyle = currentColor;
                    ctx.fillRect(x - currentSize/2, y - currentSize/2, currentSize, currentSize);
                } else if (currentBrush === 'spray') {
                    for (let i = 0; i < 20; i++) {
                        const offsetX = (Math.random() - 0.5) * currentSize;
                        const offsetY = (Math.random() - 0.5) * currentSize;
                        
                        ctx.fillStyle = currentColor;
                        ctx.beginPath();
                        ctx.arc(x + offsetX, y + offsetY, 1, 0, Math.PI * 2);
                        ctx.fill();
                    }
                }
            }
            
            function drawEmoji(x, y) {
                ctx.font = `${currentSize * 2}px Arial`;
                ctx.textAlign = 'center';
                ctx.textBaseline = 'middle';
                ctx.fillText(currentEmoji, x, y);
            }
            
            function stopDrawing() {
                if (isDrawing) {
                    isDrawing = false;
                    ctx.beginPath();
                }
            }
            
            // Mouse events
            canvas.addEventListener('mousedown', startDrawing);
            canvas.addEventListener('mousemove', draw);
            canvas.addEventListener('mouseup', stopDrawing);
            canvas.addEventListener('mouseout', stopDrawing);
            
            // Touch events for mobile
            canvas.addEventListener('touchstart', (e) => {
                e.preventDefault();
                startDrawing(e);
            });
            
            canvas.addEventListener('touchmove', (e) => {
                e.preventDefault();
                draw(e);
            });
            
            canvas.addEventListener('touchend', (e) => {
                e.preventDefault();
                stopDrawing();
            });
            
            // Clear canvas
            document.getElementById('clearCanvas').addEventListener('click', () => {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                drawBackground(); // Redraw background after clearing
            });
            
            // Save artwork
            document.getElementById('saveArt').addEventListener('click', () => {
                const link = document.createElement('a');
                link.download = 'my-street-art.png';
                link.href = canvas.toDataURL();
                link.click();
            });
        })();
    </script>
</body>
</html>
