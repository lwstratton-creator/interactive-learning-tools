<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Stroke Matching Game</title>
<style>
/* Scoped styles to prevent parent page interference */
.matching-module {
  all: initial;
  display: block;
}

.matching-module * {
  all: unset;
  box-sizing: border-box;
}

.matching-module {
  --primary-color: #C41E3A;
  --secondary-color: #FFD700;
  --success-color: #0C8918;
  --error-color: #8B0000;
  --text-color: #234E52;
  --bg-light: #F7F9FC;
  --neutral-color: #FFFFFF;
  --shadow-soft: 0 4px 6px rgba(139, 0, 0, 0.1);
  --shadow-hover: 0 6px 8px rgba(139, 0, 0, 0.15);
  
  font-family: Arial, sans-serif;
  max-width: 900px;
  margin: 0 auto;
  padding: 25px;
  display: block;
  border: 3px solid var(--primary-color);
  border-radius: 15px;
  background: white;
  box-shadow: var(--shadow-soft);
}

.matching-module .section-title {
  display: block;
  color: var(--primary-color);
  font-size: 1.8em;
  font-weight: bold;
  margin-bottom: 20px;
  padding-bottom: 10px;
  border-bottom: 3px solid var(--primary-color);
  text-align: center;
}

.matching-module .instructions {
  display: block;
  background: var(--bg-light);
  padding: 15px;
  border-radius: 8px;
  margin-bottom: 20px;
  font-size: 1.2em;
  color: #666;
  border: 2px solid var(--primary-color);
  text-align: center;
  line-height: 1.5;
}

.matching-module .score-display {
  display: block;
  text-align: center;
  font-size: 1.5em;
  margin: 20px 0;
  color: var(--primary-color);
  font-weight: bold;
}

.matching-module .matching-grid {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 20px;
  margin: 20px 0;
}

.matching-module .matching-item {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background: white;
  border: 3px solid var(--primary-color);
  border-radius: 12px;
  padding: 20px;
  text-align: center;
  cursor: pointer;
  transition: all 0.3s ease;
  min-height: 150px;
  overflow: hidden;
}

.matching-module .matching-item:hover {
  transform: translateY(-5px);
  box-shadow: var(--shadow-hover);
}

.matching-module .matching-item.selected {
  background: rgba(196, 30, 58, 0.1);
  border-width: 4px;
  transform: scale(1.05);
}

.matching-module .matching-item.correct {
  background: rgba(12, 137, 24, 0.1);
  border-color: var(--success-color);
  pointer-events: none;
}

.matching-module .matching-item.wrong {
  animation: shake 0.5s ease;
}

.matching-module .matching-stroke {
  display: block;
  font-size: 5em;
  color: var(--primary-color);
  line-height: 1;
}

.matching-module .matching-pinyin {
  display: none;
  font-size: 1.2em;
  color: var(--success-color);
  font-weight: bold;
  margin-top: 8px;
  line-height: 1.2;
  opacity: 0;
  transition: opacity 0.5s ease;
  font-family: Arial, sans-serif;
}

.matching-module .matching-item.correct .matching-pinyin {
  display: block;
  opacity: 1;
  animation: fadeInPinyin 0.5s ease;
}

@keyframes fadeInPinyin {
  from {
    opacity: 0;
    transform: translateY(-5px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.matching-module .matching-label {
  display: block;
  font-size: 1.3em;
  color: var(--text-color);
  margin-top: 8px;
  line-height: 1.2;
  font-weight: bold;
}

.matching-module .feedback {
  display: block;
  text-align: center;
  margin: 20px 0;
  padding: 15px;
  border-radius: 12px;
  font-size: 1.3em;
  opacity: 0;
  transition: opacity 0.3s ease;
  color: white;
  line-height: 1.4;
  font-family: Arial, sans-serif;
}

.matching-module .feedback.show {
  opacity: 1;
}

.matching-module .feedback.success {
  background: var(--success-color);
}

.matching-module .feedback.error {
  background: var(--error-color);
}

.matching-module .game-controls {
  display: flex;
  gap: 15px;
  justify-content: center;
  margin: 20px 0;
}

.matching-module .control-button {
  display: inline-block;
  padding: 12px 30px;
  font-size: 1.2em;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-weight: bold;
  background: #666;
  color: white;
  text-align: center;
  font-family: Arial, sans-serif;
  line-height: 1.3;
}

.matching-module .control-button:hover {
  background: #555;
  transform: translateY(-2px);
}

@keyframes shake {
  0%, 100% { transform: translateX(0); }
  25% { transform: translateX(-10px); }
  75% { transform: translateX(10px); }
}

/* Responsive Design */
@media (max-width: 768px) {
  .matching-module {
    padding: 15px;
  }

  .matching-module .matching-grid {
    grid-template-columns: 1fr;
    gap: 15px;
  }

  .matching-module .section-title {
    font-size: 1.5em;
  }

  .matching-module .matching-item {
    min-height: 130px;
    padding: 15px;
  }

  .matching-module .matching-stroke {
    font-size: 4em;
  }

  .matching-module .matching-pinyin {
    font-size: 1em;
  }

  .matching-module .matching-label {
    font-size: 1.1em;
  }
}

@media (max-width: 480px) {
  .matching-module .matching-item {
    min-height: 120px;
  }

  .matching-module .matching-stroke {
    font-size: 3.5em;
  }

  .matching-module .matching-pinyin {
    font-size: 0.9em;
  }

  .matching-module .matching-label {
    font-size: 1em;
  }
}
</style>
</head>
<body>
<div class="matching-module">
  <div class="section-title">Match the Stroke! ‚úèÔ∏è</div>
  <div class="instructions">
    üëâ Match each stroke with its name. Click a stroke, then click the matching name!
  </div>
  
  <div class="score-display">Matches: <span id="matchScore">0</span> / 4</div>
  
  <div class="matching-grid" id="matchingGame">
    <div class="matching-item" data-type="stroke" data-id="horizontal" data-pinyin="h√©ng">
      <div class="matching-stroke">‰∏Ä</div>
      <div class="matching-pinyin">h√©ng</div>
    </div>
    <div class="matching-item" data-type="stroke" data-id="vertical" data-pinyin="sh√π">
      <div class="matching-stroke">‰∏®</div>
      <div class="matching-pinyin">sh√π</div>
    </div>
    <div class="matching-item" data-type="stroke" data-id="left-falling" data-pinyin="piƒõ">
      <div class="matching-stroke">‰∏ø</div>
      <div class="matching-pinyin">piƒõ</div>
    </div>
    <div class="matching-item" data-type="stroke" data-id="right-falling" data-pinyin="n√†">
      <div class="matching-stroke">„áè</div>
      <div class="matching-pinyin">n√†</div>
    </div>
    <div class="matching-item" data-type="name" data-id="horizontal">
      <div class="matching-label">Horizontal</div>
    </div>
    <div class="matching-item" data-type="name" data-id="vertical">
      <div class="matching-label">Vertical</div>
    </div>
    <div class="matching-item" data-type="name" data-id="left-falling">
      <div class="matching-label">Left-falling</div>
    </div>
    <div class="matching-item" data-type="name" data-id="right-falling">
      <div class="matching-label">Right-falling</div>
    </div>
  </div>

  <div class="feedback" id="matchingFeedback"></div>
  
  <div class="game-controls">
    <button class="control-button" onclick="resetMatching()">üîÑ Reset Game</button>
  </div>
</div>

<script>
let matchingState = {
  selected: null,
  matches: 0
};

// Scramble the cards on page load
document.addEventListener('DOMContentLoaded', function() {
  scrambleCards();
});

function scrambleCards() {
  const grid = document.getElementById('matchingGame');
  const items = Array.from(grid.children);
  
  // Shuffle array using Fisher-Yates algorithm
  for (let i = items.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [items[i], items[j]] = [items[j], items[i]];
  }
  
  // Re-append in shuffled order
  items.forEach(item => grid.appendChild(item));
}

document.getElementById('matchingGame').addEventListener('click', function(e) {
  const item = e.target.closest('.matching-item');
  if (!item || item.classList.contains('correct')) return;

  if (!matchingState.selected) {
    // First selection
    item.classList.add('selected');
    matchingState.selected = item;
  } else {
    // Second selection
    const first = matchingState.selected;
    const second = item;

    if (first === second) return; // Same item clicked

    if (first.dataset.id === second.dataset.id) {
      // Correct match
      first.classList.remove('selected');
      first.classList.add('correct');
      second.classList.add('correct');
      matchingState.matches++;
      document.getElementById('matchScore').textContent = matchingState.matches;
      
      showFeedback('‚ú® Perfect match! ÂæàÂ•ΩÔºÅ', 'success');
      
      if (matchingState.matches === 4) {
        setTimeout(() => {
          showFeedback('üåü Excellent! You matched all strokes! Â§™Ê£í‰∫ÜÔºÅ', 'success');
        }, 500);
      }
    } else {
      // Wrong match
      first.classList.add('wrong');
      second.classList.add('wrong');
      showFeedback('‚ùå Try again! ÂÜçËØï‰∏ÄÊ¨°ÔºÅ', 'error');
      
      setTimeout(() => {
        first.classList.remove('wrong', 'selected');
        second.classList.remove('wrong');
      }, 800);
    }
    
    matchingState.selected = null;
  }
});

function resetMatching() {
  const items = document.querySelectorAll('.matching-item');
  items.forEach(item => {
    item.classList.remove('selected', 'correct', 'wrong');
  });
  matchingState = { selected: null, matches: 0 };
  document.getElementById('matchScore').textContent = '0';
  document.getElementById('matchingFeedback').classList.remove('show');
  
  // Scramble again on reset
  scrambleCards();
}

function showFeedback(message, type) {
  const feedback = document.getElementById('matchingFeedback');
  feedback.textContent = message;
  feedback.className = `feedback ${type} show`;
}
</script>
</body>
</html>
